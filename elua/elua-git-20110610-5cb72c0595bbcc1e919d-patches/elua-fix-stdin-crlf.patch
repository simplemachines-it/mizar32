Index: elua/src/newlib/genstd.c
===================================================================
--- elua.orig/src/newlib/genstd.c	2011-04-23 19:32:30.283233002 +0200
+++ elua/src/newlib/genstd.c	2011-04-23 19:39:57.831233000 +0200
@@ -13,7 +13,6 @@
 
 static p_std_send_char std_send_char_func;
 static p_std_get_char std_get_char_func;
-int std_prev_char = -1;
 
 // 'read'
 static _ssize_t std_read( struct _reent *r, int fd, void* vptr, size_t len )
@@ -41,19 +40,17 @@
   }      
   
   i = 0;
-  while( i < len )
-  {  
-    if( std_prev_char != -1 )
-    {
-      // We have a char from the previous run of std_read, so put it in the buffer
-      ptr[ i ++ ] = ( char )std_prev_char;
-      std_prev_char = -1;
-      continue;
-    }
-    if( ( c = std_get_char_func( STD_INFINITE_TIMEOUT ) ) == -1 )
-      break;
-    if( ( c == 8 ) || ( c == 0x7F ) ) // Backspace
+  do {
+    c = std_get_char_func( STD_INFINITE_TIMEOUT );
+    switch( c )
     {
+    case STD_CTRLZ_CODE:  // End of file
+      return 0;
+
+    case -1:              // UART overrun/failure - return chars so far
+      return i;
+
+    case 8: case 0x7F:    // Backspace
       if( i > 0 )
       {
         i --;        
@@ -61,25 +58,26 @@
         std_send_char_func( DM_STDOUT_NUM, ' ' );      
         std_send_char_func( DM_STDOUT_NUM, 8 );                    
       }      
-      continue;
-    }
-    if( !isprint( c ) && c != '\n' && c != '\r' && c != STD_CTRLZ_CODE )
-      continue;
-    if( c == STD_CTRLZ_CODE )
-      return 0;
-    std_send_char_func( DM_STDOUT_NUM, c );
-    if( c == '\r' || c == '\n' )
-    {
-      // Handle both '\r\n' and '\n\r' here
-      std_prev_char = std_get_char_func( STD_INTER_CHAR_TIMEOUT ); // consume the next char (\r or \n) if any
-      if( std_prev_char + c == '\r' + '\n' ) // we must ignore this character
-        std_prev_char = -1;
-      std_send_char_func( DM_STDOUT_NUM, '\r' + '\n' - c );
-      ptr[ i ] = '\n';
-      return i + 1;
+      break;
+
+    case '\r': case '\n':
+      // Allow either CR or LF as line terminator: in either case
+      // output CRLF and return the line of input with a \n on the end.
+      std_send_char_func( DM_STDOUT_NUM, '\r');
+      std_send_char_func( DM_STDOUT_NUM, '\n');
+      ptr[ i++ ] = '\n';
+      return i;
+
+    default:
+      // Ignore control characters
+      if( !isprint( c ) )
+        continue;
+      // Echo the character
+      std_send_char_func( DM_STDOUT_NUM, c );
+      ptr[ i ++ ] = c;
+      break;
     }
-    ptr[ i ++ ] = c;
-  }
+  } while( i < len );
   return i;
 }
 
