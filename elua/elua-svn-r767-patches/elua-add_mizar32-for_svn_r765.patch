diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/SConstruct elua-svn+mizar32/SConstruct
--- elua-svn/SConstruct	2010-07-29 10:51:30.000000000 +0200
+++ elua-svn+mizar32/SConstruct	2010-07-30 12:57:58.000000000 +0200
@@ -75,7 +75,7 @@
   'lpc288x' : { 'cpus' : [ 'LPC2888' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
   'str7' : { 'cpus' : [ 'STR711FR2' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
   'stm32' : { 'cpus' : [ 'STM32F103ZE', 'STM32F103RE' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
-  'avr32' : { 'cpus' : [ 'AT32UC3A0512', 'AT32UC3B0256' ], 'toolchains' : [ 'avr32-gcc' ] },
+  'avr32' : { 'cpus' : [ 'AT32UC3A0512', 'AT32UC3A0128', 'AT32UC3B0256' ], 'toolchains' : [ 'avr32-gcc' ] },
   'lpc24xx' : { 'cpus' : [ 'LPC2468' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] },
   'lpc17xx' : { 'cpus' : [ 'LPC1768' ], 'toolchains' : [ 'arm-gcc', 'codesourcery', 'devkitarm', 'arm-eabi-gcc' ] }
 }
@@ -97,7 +97,8 @@
                'ET-STM32' : [ 'STM32F103RE' ],
                'EAGLE-100' : [ 'LM3S6918' ],
                'ELUA-PUC' : ['LPC2468' ],
-               'MBED' : ['LPC1768']
+               'MBED' : ['LPC1768'],
+               'MIZAR32' : [ 'AT32UC3A0128' ],
             }
 
 cpu_list = sum([board_list[i] for i in board_list],[])
@@ -148,6 +149,7 @@
               'EAGLE-100' : [ 'bisect', 'hangman', 'lhttpd', 'led', 'hello', 'info' ],
               'ELUA-PUC' : [ 'bisect', 'hangman', 'led', 'hello', 'info', 'pwmled' ],
               'MBED' : [ 'bisect', 'hangman', 'hello', 'info', 'led', 'pwmled', 'dualpwm', 'life', 'adcscope','adcpoll' ],
+              'MIZAR32' : [ 'led' ],
 }
 
 comp = Environment( tools = [],
@@ -297,7 +299,7 @@
 
   # CPU/allocator mapping (if allocator not specified)
   if comp['allocator'] == 'auto':
-    if comp['board'] in ['LPC-H2888', 'ATEVK1100', 'MBED']:
+    if comp['board'] in ['LPC-H2888', 'ATEVK1100', 'MBED', 'MIZAR32']:
       comp['allocator'] = 'multiple'
     else:
       comp['allocator'] = 'newlib'
diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/src/platform/avr32/at32uc3a0128.ld elua-svn+mizar32/src/platform/avr32/at32uc3a0128.ld
--- elua-svn/src/platform/avr32/at32uc3a0128.ld	1970-01-01 01:00:00.000000000 +0100
+++ elua-svn+mizar32/src/platform/avr32/at32uc3a0128.ld	2010-07-29 17:20:59.000000000 +0200
@@ -0,0 +1,50 @@
+MEMORY
+{
+    sram (W!RX) : ORIGIN = 0x00000004, LENGTH = 0x00007FFC
+    flash (RX) : ORIGIN = 0x80002000, LENGTH = 0x00020000 - 0x2000
+}
+
+SECTIONS
+{
+    .text :
+    {
+        . = ALIGN(4);
+        _stext = .;
+        PROVIDE(stext = .);
+        KEEP(*(.start))
+        *(.text .text.*)
+        *(.rodata .rodata.*)
+        *(.gnu.linkonce.t.*)
+        *(.glue_7)
+        *(.glue_7t)
+        *(.gcc_except_table)
+        *(.gnu.linkonce.r.*)
+        *(.exception .exception.*)
+        . = ALIGN(4);
+        _etext = .;
+        PROVIDE(etext = .);
+    } >flash
+
+    .data : AT (_etext)
+    {
+        . = ALIGN(4);
+        _data = .;
+        *(.ramfunc .ramfunc.* .fastrun .fastrun.*)
+        *(.data .data.*)
+        *(.gnu.linkonce.d.*)
+        . = ALIGN(4);
+        _edata = .;
+    } >sram
+
+    .bss (NOLOAD) : {
+        _bss = .;
+        *(.bss .bss.*)
+        *(.gnu.linkonce.b.*)
+        *(COMMON)
+        . = ALIGN(4);
+        _ebss = .;
+    } >sram
+
+    end = .;
+    _sstack = 0x00008000;
+}
diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/src/platform/avr32/board.h elua-svn+mizar32/src/platform/avr32/board.h
--- elua-svn/src/platform/avr32/board.h	2010-07-28 11:07:03.000000000 +0200
+++ elua-svn+mizar32/src/platform/avr32/board.h	2010-07-29 15:54:18.000000000 +0200
@@ -65,6 +65,7 @@
 #define NGW100            7   //!< AT32AP7000 NGW100 board.
 #define STK600_RCUC3L0    8   //!< STK600 RCUC3L0 board.
 #define UC3L_EK           9   //!< AT32UC3L-EK board.
+#define MIZAR32           10  //!< Simplemachines.it MIZAR32 board.
 #define USER_BOARD        99  //!< User-reserved board (if any).
 //! @}
 
@@ -94,6 +95,8 @@
   #include "STK600/RCUC3L0/stk600_rcuc3l0.h"
 #elif BOARD == UC3L_EK
   #include "UC3L_EK/uc3l_ek.h"
+#elif BOARD == MIZAR32
+  #include "MIZAR32/mizar32.h"
 #elif BOARD == USER_BOARD
   // User-reserved area: #include the header file of your board here (if any).
   #include "user_board.h"
@@ -118,6 +121,10 @@
 #endif
 
 #define REQ_CPU_FREQ      60000000
-#define REQ_PBA_FREQ      15000000
+#if BOARD == MIZAR32
+  #define REQ_PBA_FREQ      60000000
+#else
+  #define REQ_PBA_FREQ      15000000
+#endif
 
 #endif  // _BOARD_H_
diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/src/platform/avr32/conf.py elua-svn+mizar32/src/platform/avr32/conf.py
--- elua-svn/src/platform/avr32/conf.py	2010-07-29 10:51:30.000000000 +0200
+++ elua-svn+mizar32/src/platform/avr32/conf.py	2010-07-29 17:28:39.000000000 +0200
@@ -9,6 +9,9 @@
     comp.Append(CPPDEFINES = {'BOARD' : 1})
 elif comp[ 'board' ]  == "ATEVK1101":
     comp.Append(CPPDEFINES = {'BOARD' : 2})
+elif comp[ 'board' ]  == "MIZAR32":
+    specific_files += " sdramc.c"
+    comp.Append(CPPDEFINES = {'BOARD' : 10})
 else:
     print "Invalid board for %s platform (%s)" %( platform, comp[ 'board' ] )
     sys.exit( -1 )
diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/src/platform/avr32/MIZAR32/mizar32_conf.h elua-svn+mizar32/src/platform/avr32/MIZAR32/mizar32_conf.h
--- elua-svn/src/platform/avr32/MIZAR32/mizar32_conf.h	1970-01-01 01:00:00.000000000 +0100
+++ elua-svn+mizar32/src/platform/avr32/MIZAR32/mizar32_conf.h	2010-07-30 12:16:13.000000000 +0200
@@ -0,0 +1,131 @@
+// eLua platform configuration
+
+#ifndef __MIZAR32_CONF_H__
+#define __MIZAR32_CONF_H__
+
+#include "sdramc.h"
+
+// *****************************************************************************
+// Define here what components you want for this platform
+//#define BUILD_MMCFS
+//#define BUILD_XMODEM
+//#define BUILD_SHELL
+//#define BUILD_ROMFS
+//#define BUILD_TERM
+//#define BUILD_CON_GENERIC
+//#define BUILD_RPC
+
+// *****************************************************************************
+// UART/Timer IDs configuration data (used in main.c)
+
+#define CON_UART_ID         0
+#define CON_UART_SPEED      115200
+#define CON_TIMER_ID        0
+#define TERM_LINES          25
+#define TERM_COLS           80
+
+// *****************************************************************************
+// SPI pins configuration data
+
+#define BOARD_SPI0_SCK_PIN                  AVR32_PIN_PA13
+#define BOARD_SPI0_SCK_PIN_FUNCTION         0
+#define BOARD_SPI0_MISO_PIN                 AVR32_PIN_PA11
+#define BOARD_SPI0_MISO_PIN_FUNCTION        0
+#define BOARD_SPI0_MOSI_PIN                 AVR32_PIN_PA12
+#define BOARD_SPI0_MOSI_PIN_FUNCTION        0
+
+#define BOARD_SPI1_SCK_PIN                  AVR32_PIN_PA15
+#define BOARD_SPI1_SCK_PIN_FUNCTION         1
+#define BOARD_SPI1_MISO_PIN                 AVR32_PIN_PA17
+#define BOARD_SPI1_MISO_PIN_FUNCTION        1
+#define BOARD_SPI1_MOSI_PIN                 AVR32_PIN_PA16
+#define BOARD_SPI1_MOSI_PIN_FUNCTION        1
+
+// Auxiliary libraries that will be compiled for this platform
+
+#if defined( BUILD_RPC ) || defined( ELUA_BOOT_RPC )
+#define RPCLINE _ROM( AUXLIB_RPC, luaopen_rpc, rpc_map )
+#else
+#define RPCLINE
+#if !defined( BUILD_RPC )
+#define BUILD_RPC
+#endif
+#endif
+
+#define LUA_PLATFORM_LIBS_ROM\
+  _ROM( AUXLIB_PD, luaopen_pd, pd_map )\
+  _ROM( AUXLIB_UART, luaopen_uart, uart_map )\
+  _ROM( AUXLIB_PIO, luaopen_pio, pio_map )\
+  _ROM( AUXLIB_TMR, luaopen_tmr, tmr_map )\
+  _ROM( AUXLIB_TERM, luaopen_term, term_map )\
+  _ROM( AUXLIB_CPU, luaopen_cpu, cpu_map )\
+  _ROM( AUXLIB_ELUA, luaopen_elua, elua_map )\
+  RPCLINE\
+  _ROM( AUXLIB_BIT, luaopen_bit, bit_map )\
+  _ROM( AUXLIB_PACK, luaopen_pack, pack_map )\
+  _ROM( LUA_MATHLIBNAME, luaopen_math, math_map )
+
+/* No ROM modules, so as to fit in 128KB */
+#undef  LUA_PLATFORM_LIBS_ROM
+#define LUA_PLATFORM_LIBS_ROM
+
+// *****************************************************************************
+// Configuration data
+
+// Virtual timers (0 if not used)
+#define VTMR_NUM_TIMERS       4
+#define VTMR_FREQ_HZ          4
+
+// Number of resources (0 if not available/not implemented)
+#define NUM_PIO               5
+#define NUM_SPI               2
+#define NUM_UART              2
+#if VTMR_NUM_TIMERS > 0
+#define NUM_TIMER             2
+#else
+#define NUM_TIMER             3
+#endif
+#define NUM_PWM               0
+#define NUM_ADC               0
+#define NUM_CAN               0
+
+// RPC boot options
+#define RPC_UART_ID           CON_UART_ID
+#define RPC_TIMER_ID          CON_TIMER_ID
+#define RPC_UART_SPEED        CON_UART_SPEED
+
+// Enable RX buffering on UART
+#define BUF_ENABLE_UART
+#define CON_BUF_SIZE          BUF_SIZE_128
+// REMEMBER to change next line if buffering is enabled and CON_UART_ID is not 0!
+#define CON_UART_IRQ          AVR32_USART0_IRQ
+
+
+// MMCFS Support (FatFs on SD/MMC)
+// For MIZAR  - PA5 = CLK, PA6 = MISO, PA7 = MOSI, PA8 = CS
+#define MMCFS_TICK_HZ                10
+#define MMCFS_TICK_MS                ( 1000 / MMCFS_TICK_HZ )
+#define MMCFS_CS_PORT                0
+#define MMCFS_CS_PIN                 SD_MMC_SPI_NPCS_PIN
+#define MMCFS_SPI_NUM                1
+
+// CPU frequency (needed by the CPU module, 0 if not used)
+#define CPU_FREQUENCY         REQ_CPU_FREQ
+
+// PIO prefix ('0' for P0, P1, ... or 'A' for PA, PB, ...)
+#define PIO_PREFIX            'A'
+// Pins per port configuration:
+// #define PIO_PINS_PER_PORT (n) if each port has the same number of pins, or
+// #define PIO_PIN_ARRAY { n1, n2, ... } to define pins per port in an array
+// Use #define PIO_PINS_PER_PORT 0 if this isn't needed
+#define PIO_PIN_ARRAY         { 31, 32, 6, 32, 8 }
+
+// Allocator data: define your free memory zones here in two arrays
+// (start address and end address)
+#define MEM_START_ADDRESS     { ( void* )end, ( void* )SDRAM }
+#define MEM_END_ADDRESS       { ( void* )( 0x10000 - STACK_SIZE_TOTAL - 1 ), ( void* )( SDRAM + SDRAM_SIZE - 1 ) }
+
+// *****************************************************************************
+// CPU constants that should be exposed to the eLua "cpu" module
+
+#endif // #ifndef __MIZAR32_CONF_H__
diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/src/platform/avr32/MIZAR32/mizar32.h elua-svn+mizar32/src/platform/avr32/MIZAR32/mizar32.h
--- elua-svn/src/platform/avr32/MIZAR32/mizar32.h	1970-01-01 01:00:00.000000000 +0100
+++ elua-svn+mizar32/src/platform/avr32/MIZAR32/mizar32.h	2010-07-29 17:26:13.000000000 +0200
@@ -0,0 +1,323 @@
+/* This header file was part of the ATMEL AVR-UC3-SoftwareFramework-1.6.1 Release */
+
+/*This file is prepared for Doxygen automatic documentation generation.*/
+/*! \file *********************************************************************
+ *
+ * \brief AT32UC3A MIZAR32 board header file.
+ *
+ * This file contains definitions and services related to the features of the
+ * EVK1100 board rev. B and C.
+ *
+ * To use this board, define BOARD=EVK1100.
+ *
+ * - Compiler:           IAR EWAVR32 and GNU GCC for AVR32
+ * - Supported devices:  All AVR32 AT32UC3A devices can be used.
+ * - AppNote:
+ *
+ * \author               Atmel Corporation: http://www.atmel.com \n
+ *                       Modified for MIZAR32 by Nuccio Raciti 2010
+ *
+ ******************************************************************************/
+
+/* Copyright (c) 2009 Atmel Corporation. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice, this
+ * list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ * this list of conditions and the following disclaimer in the documentation
+ * and/or other materials provided with the distribution.
+ *
+ * 3. The name of Atmel may not be used to endorse or promote products derived
+ * from this software without specific prior written permission.
+ *
+ * 4. This software may only be redistributed and used in connection with an Atmel
+ * AVR product.
+ *
+ * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT ARE
+ * EXPRESSLY AND SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR
+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE
+ *
+ */
+
+#ifndef _MIZAR32_H_
+#define _MIZAR32_H_
+
+#include "compiler.h"
+
+//#ifdef __AVR32_ABI_COMPILER__ // Automatically defined when compiling for AVR32, not when assembling.
+//#  include "led.h"
+//#endif  // __AVR32_ABI_COMPILER__
+
+
+/*! \name Oscillator Definitions
+ */
+//! @{
+
+// RCOsc has no custom calibration by default. Set the following definition to
+// the appropriate value if a custom RCOsc calibration has been applied to your
+// part.
+//#define FRCOSC          AVR32_PM_RCOSC_FREQUENCY              //!< RCOsc frequency: Hz.
+
+#define FOSC32          32768                                 //!< Osc32 frequency: Hz.
+#define OSC32_STARTUP   AVR32_PM_OSCCTRL32_STARTUP_8192_RCOSC //!< Osc32 startup time: RCOsc periods.
+
+#define FOSC0           12000000                              //!< Osc0 frequency: Hz.
+#define OSC0_STARTUP    AVR32_PM_OSCCTRL0_STARTUP_2048_RCOSC  //!< Osc0 startup time: RCOsc periods.
+
+// Osc1 crystal is not mounted by default. Set the following definitions to the
+// appropriate values if a custom Osc1 crystal is mounted on your board.
+//#define FOSC1           12000000                              //!< Osc1 frequency: Hz.
+//#define OSC1_STARTUP    AVR32_PM_OSCCTRL1_STARTUP_2048_RCOSC  //!< Osc1 startup time: RCOsc periods.
+
+//! @}
+
+
+/*! \name SDRAM Definitions
+ */
+//! @{
+
+//! Part header file of used SDRAM(s).
+#define SDRAM_PART_HDR  "MT48LC16M16A2TG7E/mt48lc16m16a2tg7e.h"
+
+//! Data bus width to use the SDRAM(s) with (16 or 32 bits; always 16 bits on
+//! UC3).
+#define SDRAM_DBW       16
+
+//! @}
+
+
+/*! \name USB Definitions
+ */
+//! @{
+
+//! Multiplexed pin used for USB_ID: AVR32_USBB_USB_ID_x_x.
+//! To be selected according to the AVR32_USBB_USB_ID_x_x_PIN and
+//! AVR32_USBB_USB_ID_x_x_FUNCTION definitions from <avr32/uc3axxxx.h>.
+#define USB_ID                      AVR32_USBB_USB_ID_0_0
+
+//! Multiplexed pin used for USB_VBOF: AVR32_USBB_USB_VBOF_x_x.
+//! To be selected according to the AVR32_USBB_USB_VBOF_x_x_PIN and
+//! AVR32_USBB_USB_VBOF_x_x_FUNCTION definitions from <avr32/uc3axxxx.h>.
+#define USB_VBOF                    AVR32_USBB_USB_VBOF_0_1
+
+//! Active level of the USB_VBOF output pin.
+#define USB_VBOF_ACTIVE_LEVEL       LOW
+
+//! USB overcurrent detection pin.
+#define USB_OVERCURRENT_DETECT_PIN  AVR32_PIN_PX33
+
+//! @}
+
+
+//! GPIO connection of the MAC PHY PWR_DOWN/INT signal.
+#define MACB_INTERRUPT_PIN  AVR32_PIN_PA24
+
+
+//! Number of LEDs.
+#define LED_COUNT   8
+
+/*! \name GPIO Connections of LEDs
+ */
+//! @{
+#define LED0_GPIO   AVR32_PIN_PB27
+#define LED1_GPIO   AVR32_PIN_PB28
+#define LED2_GPIO   AVR32_PIN_PB29
+#define LED3_GPIO   AVR32_PIN_PB30
+#define LED4_GPIO   AVR32_PIN_PB19
+#define LED5_GPIO   AVR32_PIN_PB20
+#define LED6_GPIO   AVR32_PIN_PB21
+#define LED7_GPIO   AVR32_PIN_PB22
+//! @}
+
+/*! \name PWM Channels of LEDs
+ */
+//! @{
+#define LED0_PWM    (-1)
+#define LED1_PWM    (-1)
+#define LED2_PWM    (-1)
+#define LED3_PWM    (-1)
+#define LED4_PWM      0
+#define LED5_PWM      1
+#define LED6_PWM      2
+#define LED7_PWM      3
+//! @}
+
+/*! \name PWM Functions of LEDs
+ */
+//! @{
+#define LED0_PWM_FUNCTION   (-1)
+#define LED1_PWM_FUNCTION   (-1)
+#define LED2_PWM_FUNCTION   (-1)
+#define LED3_PWM_FUNCTION   (-1)
+#define LED4_PWM_FUNCTION   AVR32_PWM_0_FUNCTION
+#define LED5_PWM_FUNCTION   AVR32_PWM_1_FUNCTION
+#define LED6_PWM_FUNCTION   AVR32_PWM_2_FUNCTION
+#define LED7_PWM_FUNCTION   AVR32_PWM_3_FUNCTION
+//! @}
+
+/*! \name Color Identifiers of LEDs to Use with LED Functions
+ */
+//! @{
+#define LED_MONO0_GREEN   LED0
+#define LED_MONO1_GREEN   LED1
+#define LED_MONO2_GREEN   LED2
+#define LED_MONO3_GREEN   LED3
+#define LED_BI0_GREEN     LED5
+#define LED_BI0_RED       LED4
+#define LED_BI1_GREEN     LED7
+#define LED_BI1_RED       LED6
+//! @}
+
+
+/*! \name GPIO Connections of Push Buttons
+ */
+//! @{
+#define GPIO_PUSH_BUTTON_0            AVR32_PIN_PX16
+#define GPIO_PUSH_BUTTON_0_PRESSED    0
+#define GPIO_PUSH_BUTTON_1            AVR32_PIN_PX19
+#define GPIO_PUSH_BUTTON_1_PRESSED    0
+#define GPIO_PUSH_BUTTON_2            AVR32_PIN_PX22
+#define GPIO_PUSH_BUTTON_2_PRESSED    0
+//! @}
+
+
+/*! \name GPIO Connections of the Joystick
+ */
+//! @{
+#define GPIO_JOYSTICK_PUSH            AVR32_PIN_PA20
+#define GPIO_JOYSTICK_PUSH_PRESSED    0
+#define GPIO_JOYSTICK_LEFT            AVR32_PIN_PA25
+#define GPIO_JOYSTICK_LEFT_PRESSED    0
+#define GPIO_JOYSTICK_RIGHT           AVR32_PIN_PA28
+#define GPIO_JOYSTICK_RIGHT_PRESSED   0
+#define GPIO_JOYSTICK_UP              AVR32_PIN_PA26
+#define GPIO_JOYSTICK_UP_PRESSED      0
+#define GPIO_JOYSTICK_DOWN            AVR32_PIN_PA27
+#define GPIO_JOYSTICK_DOWN_PRESSED    0
+//! @}
+
+
+/*! \name ADC Connection of the Potentiometer
+ */
+//! @{
+#define ADC_POTENTIOMETER_CHANNEL   1
+#define ADC_POTENTIOMETER_PIN       AVR32_ADC_AD_1_PIN
+#define ADC_POTENTIOMETER_FUNCTION  AVR32_ADC_AD_1_FUNCTION
+//! @}
+
+
+/*! \name ADC Connection of the Temperature Sensor
+ */
+//! @{
+#define ADC_TEMPERATURE_CHANNEL     0
+#define ADC_TEMPERATURE_PIN         AVR32_ADC_AD_0_PIN
+#define ADC_TEMPERATURE_FUNCTION    AVR32_ADC_AD_0_FUNCTION
+//! @}
+
+
+/*! \name ADC Connection of the Light Sensor
+ */
+//! @{
+#define ADC_LIGHT_CHANNEL           2
+#define ADC_LIGHT_PIN               AVR32_ADC_AD_2_PIN
+#define ADC_LIGHT_FUNCTION          AVR32_ADC_AD_2_FUNCTION
+//! @}
+
+
+/*! \name SPI Connections of the DIP204 LCD
+ */
+//! @{
+#define DIP204_SPI                  (&AVR32_SPI1)
+#define DIP204_SPI_NPCS             2
+#define DIP204_SPI_SCK_PIN          AVR32_SPI1_SCK_0_0_PIN
+#define DIP204_SPI_SCK_FUNCTION     AVR32_SPI1_SCK_0_0_FUNCTION
+#define DIP204_SPI_MISO_PIN         AVR32_SPI1_MISO_0_0_PIN
+#define DIP204_SPI_MISO_FUNCTION    AVR32_SPI1_MISO_0_0_FUNCTION
+#define DIP204_SPI_MOSI_PIN         AVR32_SPI1_MOSI_0_0_PIN
+#define DIP204_SPI_MOSI_FUNCTION    AVR32_SPI1_MOSI_0_0_FUNCTION
+#define DIP204_SPI_NPCS_PIN         AVR32_SPI1_NPCS_2_0_PIN
+#define DIP204_SPI_NPCS_FUNCTION    AVR32_SPI1_NPCS_2_0_FUNCTION
+//! @}
+
+/*! \name GPIO and PWM Connections of the DIP204 LCD Backlight
+ */
+//! @{
+#define DIP204_BACKLIGHT_PIN        AVR32_PIN_PB18
+#define DIP204_PWM_CHANNEL          6
+#define DIP204_PWM_PIN              AVR32_PWM_6_PIN
+#define DIP204_PWM_FUNCTION         AVR32_PWM_6_FUNCTION
+//! @}
+
+
+/*! \name SPI Connections of the AT45DBX Data Flash Memory
+ */
+//! @{
+#define AT45DBX_SPI                 (&AVR32_SPI1)
+#define AT45DBX_SPI_NPCS            0
+#define AT45DBX_SPI_SCK_PIN         AVR32_SPI1_SCK_0_0_PIN
+#define AT45DBX_SPI_SCK_FUNCTION    AVR32_SPI1_SCK_0_0_FUNCTION
+#define AT45DBX_SPI_MISO_PIN        AVR32_SPI1_MISO_0_0_PIN
+#define AT45DBX_SPI_MISO_FUNCTION   AVR32_SPI1_MISO_0_0_FUNCTION
+#define AT45DBX_SPI_MOSI_PIN        AVR32_SPI1_MOSI_0_0_PIN
+#define AT45DBX_SPI_MOSI_FUNCTION   AVR32_SPI1_MOSI_0_0_FUNCTION
+#define AT45DBX_SPI_NPCS0_PIN       AVR32_SPI1_NPCS_0_0_PIN
+#define AT45DBX_SPI_NPCS0_FUNCTION  AVR32_SPI1_NPCS_0_0_FUNCTION
+//! @}
+
+
+/*! \name GPIO and SPI Connections of the SD/MMC Connector
+ */
+//! @{
+#define SD_MMC_CARD_DETECT_PIN      AVR32_PIN_PA02
+#define SD_MMC_WRITE_PROTECT_PIN    AVR32_PIN_PA07
+#define SD_MMC_SPI                  (&AVR32_SPI1)
+#define SD_MMC_SPI_NPCS             1
+#define SD_MMC_SPI_SCK_PIN          AVR32_SPI1_SCK_0_0_PIN
+#define SD_MMC_SPI_SCK_FUNCTION     AVR32_SPI1_SCK_0_0_FUNCTION
+#define SD_MMC_SPI_MISO_PIN         AVR32_SPI1_MISO_0_0_PIN
+#define SD_MMC_SPI_MISO_FUNCTION    AVR32_SPI1_MISO_0_0_FUNCTION
+#define SD_MMC_SPI_MOSI_PIN         AVR32_SPI1_MOSI_0_0_PIN
+#define SD_MMC_SPI_MOSI_FUNCTION    AVR32_SPI1_MOSI_0_0_FUNCTION
+#define SD_MMC_SPI_NPCS_PIN         AVR32_SPI1_NPCS_1_0_PIN
+#define SD_MMC_SPI_NPCS_FUNCTION    AVR32_SPI1_NPCS_1_0_FUNCTION
+//! @}
+
+
+/*! \name TWI Connections of the Spare TWI Connector
+ */
+//! @{
+#define SPARE_TWI                   (&AVR32_TWI)
+#define SPARE_TWI_SCL_PIN           AVR32_TWI_SCL_0_0_PIN
+#define SPARE_TWI_SCL_FUNCTION      AVR32_TWI_SCL_0_0_FUNCTION
+#define SPARE_TWI_SDA_PIN           AVR32_TWI_SDA_0_0_PIN
+#define SPARE_TWI_SDA_FUNCTION      AVR32_TWI_SDA_0_0_FUNCTION
+//! @}
+
+
+/*! \name SPI Connections of the Spare SPI Connector
+ */
+//! @{
+#define SPARE_SPI                   (&AVR32_SPI0)
+#define SPARE_SPI_NPCS              0
+#define SPARE_SPI_SCK_PIN           AVR32_SPI0_SCK_0_0_PIN
+#define SPARE_SPI_SCK_FUNCTION      AVR32_SPI0_SCK_0_0_FUNCTION
+#define SPARE_SPI_MISO_PIN          AVR32_SPI0_MISO_0_0_PIN
+#define SPARE_SPI_MISO_FUNCTION     AVR32_SPI0_MISO_0_0_FUNCTION
+#define SPARE_SPI_MOSI_PIN          AVR32_SPI0_MOSI_0_0_PIN
+#define SPARE_SPI_MOSI_FUNCTION     AVR32_SPI0_MOSI_0_0_FUNCTION
+#define SPARE_SPI_NPCS_PIN          AVR32_SPI0_NPCS_0_0_PIN
+#define SPARE_SPI_NPCS_FUNCTION     AVR32_SPI0_NPCS_0_0_FUNCTION
+//! @}
+
+#endif  // _MIZAR32_H_
diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/src/platform/avr32/platform_conf.h elua-svn+mizar32/src/platform/avr32/platform_conf.h
--- elua-svn/src/platform/avr32/platform_conf.h	2010-07-29 10:51:30.000000000 +0200
+++ elua-svn+mizar32/src/platform/avr32/platform_conf.h	2010-07-29 16:25:45.000000000 +0200
@@ -11,6 +11,8 @@
     #include "EVK1100/evk1100_conf.h"
 #elif BOARD == EVK1101
     #include "EVK1101/evk1101_conf.h"
+#elif BOARD == MIZAR32
+    #include "MIZAR32/mizar32_conf.h"
 #else
     #error No known AVR32 board defined    
 #endif
diff -r -u -N -x .svn -x '*.elf' -x '*.o' elua-svn/src/platform/avr32/sdramc.c elua-svn+mizar32/src/platform/avr32/sdramc.c
--- elua-svn/src/platform/avr32/sdramc.c	2010-07-28 11:07:03.000000000 +0200
+++ elua-svn+mizar32/src/platform/avr32/sdramc.c	2010-07-29 17:03:40.000000000 +0200
@@ -90,7 +90,8 @@
 /*! \brief Puts the multiplexed MCU pins used for the SDRAM under control of the
  *         SDRAMC.
  */
-#if BOARD == EVK1100 || BOARD == EVK1104 || BOARD == EVK1105 
+#if BOARD == EVK1100 || BOARD == EVK1104 || BOARD == EVK1105 \
+ || BOARD == MIZAR32
 static void sdramc_enable_muxed_pins(void)
 {
   static const gpio_map_t SDRAMC_EBI_GPIO_MAP =
